using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Exercise.Model;
using Exercise.Service;

namespace Exercise
{
    class Program
    {
        #region Exercise 1
        //static void Main(string[] args)
        //{
        //    var productService = new ProductService();
        //    var products = productService.InitialiseProduct();
        //    Console.WriteLine("List of all products in system");
        //    foreach (var p in products)
        //    {
        //        Console.WriteLine("Product number: {0}", p.IdGuid);
        //        Console.WriteLine("Product name: {0}", p.Name);
        //        Console.WriteLine("Product price: {0}", p.Price);
        //        Console.WriteLine("----------------------");
        //    }
        //    //Create empty shoppingCart - list of ShoppingCart object
        //    var shoppingCart = new List<ShoppingCart>();
        //    bool continueShopping = true;
        //    do
        //    {
        //        Console.WriteLine("Please enter product number you want to purchase");
        //        //Convert product id to integer
        //        var productId = Convert.ToInt32(Console.ReadLine());
        //        //Check if product id valid 
        //        //Use foreach to go through all product list
        //        foreach (var pr in products)
        //        {
        //            //If product in foreach same with product number user input
        //            if (pr.IdGuid == productId)
        //            {
        //                //Get specified product object by casting product to specified object
        //                var productType = pr.GetType();
        //                //Switch case to specify product that user added for display on the screen
        //                switch (productType.Name)
        //                {
        //                    case "Lawmower":
        //                    {
        //                        var lawMower = (Lawmower) pr;
        //                        Console.WriteLine("Product number: {0}", lawMower.IdGuid);
        //                        Console.WriteLine("Product name: {0}", lawMower.Name);
        //                        Console.WriteLine("Product price: {0}", lawMower.Price);
        //                        Console.WriteLine("Product brand: {0}", lawMower.Brand);
        //                        Console.WriteLine("Product fuel efficiency: {0}", lawMower.FuelEfficiency);
        //                        Console.WriteLine("----------------------");
        //                        break;
        //                    }
        //                    case "Computer":
        //                    {
        //                        var lawMower = (Computer) pr;
        //                        Console.WriteLine("Product number: {0}", lawMower.IdGuid);
        //                        Console.WriteLine("Product name: {0}", lawMower.Name);
        //                        Console.WriteLine("Product price: {0}", lawMower.Price);
        //                        Console.WriteLine("Product memory: {0}", lawMower.Memory);
        //                        Console.WriteLine("Product hard drive: {0}", lawMower.HardDrive);
        //                        Console.WriteLine("----------------------");
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        break;
        //                    }
        //                }
        //                //Get user quantity input
        //                Console.WriteLine("Please enter your quantity you want to purchase");
        //                int quantity = Convert.ToInt32(Console.ReadLine());
        //                //Create new object shopping cart and store value of chosen product - initializer 
        //                var chosenProduct = new ShoppingCart
        //                {
        //                    IdGuid = pr.IdGuid,
        //                    Name = pr.Name,
        //                    Price = pr.Price,
        //                    Quantity = quantity
        //                };
        //                //-------------------
        //                //Add product chosen to shopping cart 
        //                shoppingCart.Add(chosenProduct);
        //                // ----------------------------------
        //                Console.WriteLine("You has {0} product in your cart",shoppingCart.Count());
        //                Console.WriteLine("Would you like to add more product to your cart. Press Y to continue or N to Checkout");
        //                string option = Console.ReadLine();
        //                if (option == "Y" || option == "y")
        //                {
        //                    break;
        //                    //Console.WriteLine("Total to pay: ${0}", pr.Price);
        //                    //Console.WriteLine("Thank you for shopping with us. Bye bye");
        //                }
        //                else
        //                {
        //                    //Call display receipt method
        //                    DisplayReceipt(shoppingCart);
        //                    //Call display total to pay
        //                    DisplayTotalToPay(shoppingCart);
        //                    Console.WriteLine("Thank you for shopping with us. Bye bye");
        //                    continueShopping = false;
        //                    Console.ReadKey();
        //                }
        //            }
        //        }
        //    } while (continueShopping);
        //}
        #endregion

        /// <summary>
        /// Entry point when application start
        /// </summary>
        static void Main(string[] args)
        {
            FunctionOption functionoption = new FunctionOption();
            var orderHistory = OrderHistoryService.GetOrderHistory();
            //TODO Your code will be here//
            InventoryService inventory = new InventoryService();
            var stock = inventory.InitialiseProduct();
            



            foreach (var OrderList in orderHistory)
            {
                //Console.WriteLine("Customer: {0}  ({1})", OrderList.Customer.Name, OrderList.Customer.DateCreated.ToShortDateString());
                foreach (var pr in OrderList.Order)
                {
                    //Console.WriteLine("Product ID:{0}   Product Name:{1}   Product Price:{2}", pr.IdGuid, pr.Name, pr.Price);
                    stock.Find(x => x.IdGuid == pr.IdGuid).StockAvailable--;
                    stock.Find(x => x.IdGuid == pr.IdGuid).Sales++;
                    if (OrderList.Order.Any(x => x.IdGuid != pr.IdGuid))
                    {
                        OrderList.Customer.itemnumber++;
                    }

                    //var productType = pr.GetType();
                    //switch (productType.Name)
                    //{
                    //    case "Lawnmower":
                    //        {
                    //            var lawnmower = (Lawnmower)pr;
                    //            Console.WriteLine("Product ID:{0} Product Brand:{1} Product FuelEfficency:{2} Product IsVehicle:{3} Product Name:{4} Product Price:{5}", lawnmower.IdGuid, lawnmower.Brand, lawnmower.FuelEfficiency, lawnmower.IsVehicle, lawnmower.Name, lawnmower.Price);
                    //if (OrderList.Order.Any(x => x.IdGuid != pr.IdGuid))
                    //{
                    //    OrderList.Customer.itemnumber++;
                    //}
                    //            break;
                    //        }
                    //    case "Computer":
                    //        {
                    //            var computer = (Computer)pr;
                    //            Console.WriteLine("Product ID:{0} Product HardDrive:{1} Product Memory:{2} Product Name:{3} Product Price:{4}", computer.IdGuid, computer.HardDrive, computer.Memory, computer.Name, computer.Price);
                    //            if (OrderList.Order.Any(x => x.IdGuid != pr.IdGuid))
                    //            {
                    //                OrderList.Customer.itemnumber++;
                    //            }
                    //            break;

                    //        }
                    //    default:
                    //        {
                    //            break;
                    //        }
                    //}

                }
                //Console.WriteLine("Total paid : {0}", OrderList.TotalAmount);
                //Console.WriteLine("----------------------");
            }

                string input;
                functionoption.FunctionSelect();
                input = Console.ReadLine();
                
                    
                    
                    do
                    {
                       
                       
                        switch (input.ToLower())
                        {
                            case "a":
                                {
                                    Console.Clear();
                                    Console.WriteLine("-----------order history-----------");
                                    foreach (var OrderList in orderHistory)
                                    {
                                        Console.WriteLine("customer: {0}  ({1})", OrderList.Customer.Name, OrderList.Customer.DateCreated.ToShortDateString());
                                        Console.WriteLine("Order Created :{0}", OrderList.OrderCreated.ToShortDateString());
                                        foreach (var pr in OrderList.Order)
                                        {
                                            Console.WriteLine("product id:{0}   product name:{1}   product price:{2}", pr.IdGuid, pr.Name, pr.Price);
                                        }
                                        Console.WriteLine("total paid : {0}", OrderList.TotalAmount);
                                        Console.WriteLine("----------------------");
                                    }
                                    Console.WriteLine("Press any key to continue, press K to exit.");
                                    input = Console.ReadLine();
                                    functionoption.Display(input);
                                    break;
                                }
                            case "b":
                                {
                                    Console.Clear();
                                    Console.WriteLine("-----------Stock Available in Inventory-----------");
                                    foreach (var a in stock)
                                    {
                                        Console.WriteLine("Product ID:{0}   Product Name:{1}   Product StockAvailable:{2}   Sales:{3}", a.IdGuid, a.Name, a.StockAvailable, a.Sales);
                                    }
                                    Console.WriteLine("Press any key to continue, press K to exit.");
                                    input = Console.ReadLine();
                                    functionoption.Display(input);
                                    break;
                                }
                            case "c":
                                {
                                    Console.Clear();
                                    int highestsales = stock.Max(x => x.Sales);
                                    var bestseller = stock.FindAll(x => x.Sales == highestsales);
                                    Console.WriteLine("\n-----------Most purchased products-----------");
                                    foreach (var product in bestseller)
                                    {
                                        Console.WriteLine("Product ID:{0}   Product Name:{1}   Product Price:{2}   StockAvailable:{3}   Sales:{4}", product.IdGuid, product.Name, product.Price, product.StockAvailable, product.Sales);
                                    }
                                    Console.WriteLine("Press any key to continue, press K to exit.");
                                    input = Console.ReadLine();
                                    functionoption.Display(input);
                                    break;
                                }
                            case "d":
                                {
                                    Console.Clear();
                                    var longest = orderHistory.Min(x => x.Customer.DateCreated);
                                    var longtermcustomer = orderHistory.FindAll(x => x.Customer.DateCreated == longest);
                                    Console.WriteLine("\n-----------Long term customer-----------");
                                    foreach (var customer in longtermcustomer)
                                    {
                                        Console.WriteLine("Customer Name:{0}   Account Created:{1}", customer.Customer.Name, customer.Customer.DateCreated.ToShortDateString());
                                    }
                                    Console.WriteLine("Press any key to continue, press K to exit.");
                                    input = Console.ReadLine();
                                    functionoption.Display(input);
                                    break;
                                }
                            case "e":
                                {
                                    Console.Clear();
                                    var RegularCustomers = orderHistory.FindAll(x => x.Customer.itemnumber > 2);
                                    Console.WriteLine("\n-----------Regular customer-----------");
                                    foreach (var regularcunstomer in RegularCustomers)
                                    {
                                        Console.WriteLine("Customer Name:{0}   Account Created:{1}   Items Purchased:{2}", regularcunstomer.Customer.Name, regularcunstomer.Customer.DateCreated.ToShortDateString(), regularcunstomer.Customer.itemnumber);
                                    }
                                    Console.WriteLine("Press any key to select the option, press K to exit.");
                                    input = Console.ReadLine();
                                    functionoption.Display(input);
                                    break;
                                }
                            default:
                                {
                                    Console.Clear();
                                    Console.WriteLine("Invalid Input. Please select the option, press K to exit.");
                                    functionoption.FunctionSelect();
                                    input = Console.ReadLine();
                                    break;
                                }
                        }
                        
                    } while (input.ToLower() != "k");
       
        }

            //
        //Display total to pay from shopping cart
        public static void DisplayTotalToPay(List<ShoppingCart> customerShoppingCart)
        {
            decimal totalToPay = 0;
            foreach (var shoppingCart in customerShoppingCart)
            {
                totalToPay += (shoppingCart.Price * shoppingCart.Quantity);
            }
            Console.WriteLine("Total to pay: ${0}", totalToPay);
        }
        //Display reciept
        public static void DisplayReceipt(List<ShoppingCart> customerShoppingCart)
        {
            foreach (var shoppingCart in customerShoppingCart)
            {
                Console.WriteLine("---------------------");
                Console.WriteLine("Product number : {0}", shoppingCart.IdGuid);
                Console.WriteLine("Name: {0} x {1}", shoppingCart.Name, shoppingCart.Quantity);
                Console.WriteLine("Price: ${0} x {1} = ${2}", shoppingCart.Price, shoppingCart.Quantity, shoppingCart.Price * shoppingCart.Quantity);
                Console.WriteLine("---------------------");
            }
        }
    }
}
